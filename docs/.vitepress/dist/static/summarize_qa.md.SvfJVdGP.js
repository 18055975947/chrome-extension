import{_ as a,c as e,o as s,a4 as i,bq as t,br as n,bs as r,bt as l,bu as o,bv as h,bw as d,bx as c}from"./chunks/framework.DUbQYUwk.js";const f=JSON.parse('{"title":"Chrome 插件开发过程中问题集","description":"","frontmatter":{},"headers":[],"relativePath":"summarize/qa.md","filePath":"summarize/qa.md"}'),p={name:"summarize/qa.md"},k=i('<h1 id="chrome-插件开发过程中问题集" tabindex="-1">Chrome 插件开发过程中问题集 <a class="header-anchor" href="#chrome-插件开发过程中问题集" aria-label="Permalink to &quot;Chrome 插件开发过程中问题集&quot;">​</a></h1><blockquote><p>持续更新...</p></blockquote><p>本篇收集 <code>chrome</code> 浏览器插件开发过程中所遇到的问题以及解决方案</p><h2 id="一、crxjs-开发插件问题集" tabindex="-1">一、CRXJS 开发插件问题集 <a class="header-anchor" href="#一、crxjs-开发插件问题集" aria-label="Permalink to &quot;一、CRXJS 开发插件问题集&quot;">​</a></h2><h3 id="_1-popup-页面点击不显示正常页面" tabindex="-1">1. Popup 页面点击不显示正常页面 <a class="header-anchor" href="#_1-popup-页面点击不显示正常页面" aria-label="Permalink to &quot;1. Popup 页面点击不显示正常页面&quot;">​</a></h3><h4 id="_1-1-如果点击-popup-页面如下图所示-不展示正常的页面" tabindex="-1">1.1. 如果点击 popup 页面如下图所示，不展示正常的页面 <a class="header-anchor" href="#_1-1-如果点击-popup-页面如下图所示-不展示正常的页面" aria-label="Permalink to &quot;1.1. 如果点击 popup 页面如下图所示，不展示正常的页面&quot;">​</a></h4><p><img src="'+t+'" alt="error" loading="lazy"></p><h4 id="_1-2-解决方法" tabindex="-1">1.2. 解决方法 <a class="header-anchor" href="#_1-2-解决方法" aria-label="Permalink to &quot;1.2. 解决方法&quot;">​</a></h4><ol><li>点击插件【错误】按钮 <img src="'+n+'" alt="error" loading="lazy"></li><li>点击【全部清除】按钮 <img src="'+r+'" alt="在这里插入图片描述" loading="lazy"></li><li>点击刷新按钮 <img src="'+l+'" alt="reload" loading="lazy"></li><li>点击 <code>popup</code> 页面 <img src="'+o+'" alt="在这里插入图片描述" loading="lazy"></li></ol><h3 id="_2-使用-react-结合-crxjs-时不能新加-tsx-文件" tabindex="-1">2. 使用 React 结合 CRXJS 时不能新加 .tsx 文件 <a class="header-anchor" href="#_2-使用-react-结合-crxjs-时不能新加-tsx-文件" aria-label="Permalink to &quot;2. 使用 React 结合 CRXJS 时不能新加 .tsx 文件&quot;">​</a></h3><h4 id="_2-1-问题描述" tabindex="-1">2.1. 问题描述 <a class="header-anchor" href="#_2-1-问题描述" aria-label="Permalink to &quot;2.1. 问题描述&quot;">​</a></h4><p>使用 <code>React</code> 时，创建新的 <code>.tsx</code> 文件，打包构建时出现问题</p><h4 id="_2-2-解决方法" tabindex="-1">2.2. 解决方法 <a class="header-anchor" href="#_2-2-解决方法" aria-label="Permalink to &quot;2.2. 解决方法&quot;">​</a></h4><p>这个是因为 <code>CRXJS</code> 中的 <code>HMR</code> 与 <code>@vite/plugin-react-swc</code> 有冲突，需要改用 <code>@vitejs/plugin-react</code></p><p>在创建项目的时候，选择 <code>React</code> 和 <code>TypeScript</code> 即可</p><p><img src="'+h+`" alt="create pro" loading="lazy"></p><h3 id="_3-crxjs-项目发布问题" tabindex="-1">3. CRXJS 项目发布问题 <a class="header-anchor" href="#_3-crxjs-项目发布问题" aria-label="Permalink to &quot;3. CRXJS 项目发布问题&quot;">​</a></h3><p><code>CRXJX</code> 项目也需要 <code>build</code> 构建，<code>dev</code> 运行生成的 <code>dist</code> 文件夹为开发模式，在开发时使用，需要发布的时候也要通过 <code>build</code> 命令生成新的 <code>dist</code> 包</p><h2 id="二、源码问题集" tabindex="-1">二、源码问题集 <a class="header-anchor" href="#二、源码问题集" aria-label="Permalink to &quot;二、源码问题集&quot;">​</a></h2><h3 id="_1-http-127-0-0-1-5500-的问题" tabindex="-1">1. <a href="http://127.0.0.1:5500" target="_blank" rel="noreferrer">http://127.0.0.1:5500</a> 的问题 <a class="header-anchor" href="#_1-http-127-0-0-1-5500-的问题" aria-label="Permalink to &quot;1. http://127.0.0.1:5500 的问题&quot;">​</a></h3><h4 id="_1-1-问题描述" tabindex="-1">1.1. 问题描述 <a class="header-anchor" href="#_1-1-问题描述" aria-label="Permalink to &quot;1.1. 问题描述&quot;">​</a></h4><p>在运行源码的时候，很多时候可能由于文章看的不仔细，导致在这一步出现问题</p><h4 id="_1-2-解决方法-1" tabindex="-1">1.2. 解决方法 <a class="header-anchor" href="#_1-2-解决方法-1" aria-label="Permalink to &quot;1.2. 解决方法&quot;">​</a></h4><p>由于写文章和源码都是在本地服务上进行测试，<code>http://127.0.0.1:5500</code> 为本地启动的服务，是由 <code>Live Server vs code</code> 插件启动的，可以详细根据文章来改变匹配的域名或启动对应的服务</p><h3 id="_2-fetch-报错" tabindex="-1">2. Fetch 报错 <a class="header-anchor" href="#_2-fetch-报错" aria-label="Permalink to &quot;2. Fetch 报错&quot;">​</a></h3><h4 id="_2-1-问题展示" tabindex="-1">2.1. 问题展示 <a class="header-anchor" href="#_2-1-问题展示" aria-label="Permalink to &quot;2.1. 问题展示&quot;">​</a></h4><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">service-worker.js:1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Error</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checking</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> folder</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changes:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TypeError:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Failed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fetch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> service-worker.js:1:555</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Array.forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (&lt;anonymous&gt;)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (service-worker.js:1:543)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="`+d+'" alt="fetch error" loading="lazy"></p><h4 id="_2-2-解决方法-1" tabindex="-1">2.2. 解决方法 <a class="header-anchor" href="#_2-2-解决方法-1" aria-label="Permalink to &quot;2.2. 解决方法&quot;">​</a></h4><p>这个是 <code>fetch</code> 请求报错，请求的时候要把 <code>URL</code> 改掉，域名和端口要改成本地的才行，你看下请求配置 <code>fileList</code> 的配置你看下是不是和本地不一样</p><p><img src="'+c+`" alt="answer" loading="lazy"></p><h2 id="三、开发中其他问题集" tabindex="-1">三、开发中其他问题集 <a class="header-anchor" href="#三、开发中其他问题集" aria-label="Permalink to &quot;三、开发中其他问题集&quot;">​</a></h2><h3 id="_1-在-service-worker-中引入第三方包时报错" tabindex="-1">1. 在 service-worker 中引入第三方包时报错 <a class="header-anchor" href="#_1-在-service-worker-中引入第三方包时报错" aria-label="Permalink to &quot;1. 在 service-worker 中引入第三方包时报错&quot;">​</a></h3><h4 id="_1-1-问题展示" tabindex="-1">1.1. 问题展示 <a class="header-anchor" href="#_1-1-问题展示" aria-label="Permalink to &quot;1.1. 问题展示&quot;">​</a></h4><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cannot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> statement</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> outside</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> module</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_1-2-解决方法-2" tabindex="-1">1.2. 解决方法 <a class="header-anchor" href="#_1-2-解决方法-2" aria-label="Permalink to &quot;1.2. 解决方法&quot;">​</a></h4><p>使用第三方包 <code>import</code> 引入的时候需要在 <code>manifest.json</code> 的 <code>background</code> 中加入这个 <code>&quot;type&quot;: &quot;module&quot;</code> 才行</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;background&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;service_worker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;service_worker.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-嵌入的页面调用-contentjs-的方法-一直显示-undefined" tabindex="-1">2. 嵌入的页面调用 <code>contentJS</code> 的方法，一直显示 <code>undefined</code> <a class="header-anchor" href="#_2-嵌入的页面调用-contentjs-的方法-一直显示-undefined" aria-label="Permalink to &quot;2. 嵌入的页面调用 \`contentJS\` 的方法，一直显示 \`undefined\`&quot;">​</a></h3><h4 id="_2-1-问题描述-1" tabindex="-1">2.1. 问题描述 <a class="header-anchor" href="#_2-1-问题描述-1" aria-label="Permalink to &quot;2.1. 问题描述&quot;">​</a></h4><p>想再嵌入的页面中调用 <code>contentJS</code> 方法，但是一直显示 <code>undefined</code></p><h4 id="_2-2-解决方法-2" tabindex="-1">2.2. 解决方法 <a class="header-anchor" href="#_2-2-解决方法-2" aria-label="Permalink to &quot;2.2. 解决方法&quot;">​</a></h4><p>不能直接调用 <code>contentJS</code> 方法，需要注入之后放到 <code>window</code> 下</p><ol><li>先在 <code>contentjs</code> 中创建函数 <code>func</code></li><li>在 <code>contentjs</code> 中 监听消息通信，在 <code>chrome.runtime.onMessage.addListener</code> 中进行方法暴露：<code>window.func = func</code></li><li>在页面中需要进行能触发 2 的事件，2 触发之后，就可以执行 <code>func</code> 函数了</li></ol>`,44),u=[k];function b(m,_,g,F,q,E){return s(),e("div",null,u)}const C=a(p,[["render",b]]);export{f as __pageData,C as default};
