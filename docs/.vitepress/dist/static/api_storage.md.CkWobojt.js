import{_ as s,c as i,o as a,a4 as e,ag as n,ah as l,ai as t}from"./chunks/framework.DUbQYUwk.js";const b=JSON.parse('{"title":"Chrome.storage API 解析","description":"","frontmatter":{},"headers":[],"relativePath":"api/storage.md","filePath":"api/storage.md"}'),h={name:"api/storage.md"},p=e('<h1 id="chrome-storage-api-解析" tabindex="-1"><code>Chrome.storage API</code> 解析 <a class="header-anchor" href="#chrome-storage-api-解析" aria-label="Permalink to &quot;`Chrome.storage API` 解析&quot;">​</a></h1><p>前文说了 <code>cookie API</code>，拿在存储方面就少不了 <code>storage</code> 模块</p><p>使用 <code>chrome.storage API</code> 存储、检索和跟踪用户数据的更改</p><h2 id="一、各模块中的-chrome-storage-内容" tabindex="-1">一、各模块中的 <code>chrome.storage</code> 内容 <a class="header-anchor" href="#一、各模块中的-chrome-storage-内容" aria-label="Permalink to &quot;一、各模块中的 `chrome.storage` 内容&quot;">​</a></h2><h3 id="_1-service-worker-中-runtime-内容" tabindex="-1">1. <code>Service worker</code> 中 <code>runtime</code> 内容 <a class="header-anchor" href="#_1-service-worker-中-runtime-内容" aria-label="Permalink to &quot;1. `Service worker` 中 `runtime` 内容&quot;">​</a></h3><p><img src="'+n+'" alt="service storage" loading="lazy"></p><h3 id="_2-action-中-runtime-内容" tabindex="-1">2. <code>Action</code> 中 <code>runtime</code> 内容 <a class="header-anchor" href="#_2-action-中-runtime-内容" aria-label="Permalink to &quot;2. `Action` 中 `runtime` 内容&quot;">​</a></h3><p><img src="'+l+'" alt="action storage" loading="lazy"></p><h3 id="_3-content-中-runtime-内容" tabindex="-1">3. <code>Content</code> 中 <code>runtime</code> 内容 <a class="header-anchor" href="#_3-content-中-runtime-内容" aria-label="Permalink to &quot;3. `Content` 中 `runtime` 内容&quot;">​</a></h3><p><img src="'+t+'" alt="content storage" loading="lazy"></p><h2 id="二、权限-permissions" tabindex="-1">二、权限（Permissions） <a class="header-anchor" href="#二、权限-permissions" aria-label="Permalink to &quot;二、权限（Permissions）&quot;">​</a></h2><p>如果需使用 <code>Storage API</code>，需要在 <code>manifest.json</code> 文件中添加权限</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;permissions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [    </span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;storage&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="三、chrome-storage-api-功能" tabindex="-1">三、<code>Chrome.storage API</code> 功能 <a class="header-anchor" href="#三、chrome-storage-api-功能" aria-label="Permalink to &quot;三、`Chrome.storage API` 功能&quot;">​</a></h2><p><code>Storage API</code> 提供一种特定于插件的方法来保留用户数据和状态。它类似于 <code>Web</code> 平台的存储 <code>API</code>（<code>IndexedDB</code> 和 <code>Storage</code>），但在设计上是为了满足插件的存储需求</p><h3 id="_1-chrome-storage-api-主要功能" tabindex="-1">1. <code>Chrome.storage API</code> 主要功能 <a class="header-anchor" href="#_1-chrome-storage-api-主要功能" aria-label="Permalink to &quot;1. `Chrome.storage API` 主要功能&quot;">​</a></h3><ul><li>所有插件上下文（包括插件 <code>Service Worker</code> 和内容脚本）都可以访问 <code>Storage API</code></li><li>可序列化的 <code>JSON</code> 值存储为对象属性</li><li><code>Storage API</code> 是异步的，支持批量读取和写入操作</li><li>即使用户清除缓存和浏览记录，这些数据仍会保留</li><li>即使在无痕模式拆分后，存储的设置也会保留</li><li>包含一个用于企业政策的专属只读代管式存储区域</li></ul><h3 id="_2-插件如何使用-web-storage-api" tabindex="-1">2. 插件如何使用 <code>Web Storage API</code> <a class="header-anchor" href="#_2-插件如何使用-web-storage-api" aria-label="Permalink to &quot;2. 插件如何使用 `Web Storage API`&quot;">​</a></h3><p>尽管插件可以在某些上下文（弹出式窗口和其他 <code>HTML</code> 网页）中使用 <code>Storage</code> 接口（可通过 <code>window.localStorage</code> 访问），但不建议使用该接口，原因如下：</p><ul><li>扩展 <code>Service Worker</code> 无法使用 <code>Web Storage API</code></li><li>内容脚本与托管网页共享存储空间</li><li>当用户清除浏览记录后，使用 <code>Web Storage API</code> 保存的数据将会丢失</li></ul><h3 id="_3-从-web-storage-api-移至-service-worker-的-storage-api" tabindex="-1">3. 从 <code>Web Storage API</code> 移至 <code>Service Worker</code> 的 <code>Storage API</code> <a class="header-anchor" href="#_3-从-web-storage-api-移至-service-worker-的-storage-api" aria-label="Permalink to &quot;3. 从 `Web Storage API` 移至 `Service Worker` 的 `Storage API`&quot;">​</a></h3><ul><li>使用转换例程和 <code>onMessage</code> 处理程序创建屏幕外文档</li><li>在扩展 <code>Service Worker</code> 中，检查 <code>chrome.storage</code> 以获取数据</li><li>如果找不到数据，请创建屏幕外文档并调用 <code>sendMessage()</code> 以启动转换例程</li><li>在屏幕外文档的 <code>onMessage</code> 处理程序内，调用转换例程</li></ul><h3 id="_4-storage-api-存储区域" tabindex="-1">4. <code>Storage API 存储区域</code> <a class="header-anchor" href="#_4-storage-api-存储区域" aria-label="Permalink to &quot;4. `Storage API 存储区域`&quot;">​</a></h3><ul><li><code>storage.local</code><ul><li>数据会存储在本地，并会在移除插件时清除。存储空间上限为 10 MB，但可以通过请求 &quot;unlimitedStorage&quot; 权限提高上限，建议使用 storage.local 存储大量数据。</li></ul></li><li><code>storage.sync</code><ul><li>如果同步功能已启用，数据会同步到用户登录的任何 Chrome 浏览器。如果停用，其行为类似于 storage.local。当浏览器离线时，Chrome 会将数据存储在本地，并在浏览器恢复在线状态后恢复同步。配额限制大约为 100 KB，每项内容 8 KB。建议使用 storage.sync 来保留已同步的浏览器的用户设置。如果处理的是敏感用户数据，请改用 storage.session。</li></ul></li><li><code>storage.session</code><ul><li>在浏览器会话期间将数据保留在内存中。默认情况下，它不会向内容脚本公开，但可以通过设置 chrome.storage.session.setAccessLevel() 来更改此行为。存储空间上限为 10 MB。storage.session 接口是建议 Service Worker 的若干接口之一。</li></ul></li><li><code>storage.managed</code><ul><li>管理员可以使用架构和企业政策在受管环境中配置支持插件的设置。此存储区域是只读的。</li></ul></li></ul><h2 id="四、chrome-storage-api-类型-types" tabindex="-1">四、<code>Chrome.storage API</code> 类型（<code>Types</code>） <a class="header-anchor" href="#四、chrome-storage-api-类型-types" aria-label="Permalink to &quot;四、`Chrome.storage API` 类型（`Types`）&quot;">​</a></h2><h3 id="_1-accesslevel" tabindex="-1">1. <code>AccessLevel</code> <a class="header-anchor" href="#_1-accesslevel" aria-label="Permalink to &quot;1. `AccessLevel`&quot;">​</a></h3><blockquote><p>存储区域的访问权限级别</p></blockquote><p>类型为枚举</p><h4 id="枚举值" tabindex="-1">枚举值 <a class="header-anchor" href="#枚举值" aria-label="Permalink to &quot;枚举值&quot;">​</a></h4><ul><li><code>TRUSTED_CONTEXTS</code><ul><li>用于指定源自插件本身的上下文</li></ul></li><li><code>TRUSTED_AND_UNTRUSTED_CONTEXTS</code><ul><li>指定源自该插件外部的上下文</li></ul></li></ul><h3 id="_2-storagearea" tabindex="-1">2. <code>StorageArea</code> <a class="header-anchor" href="#_2-storagearea" aria-label="Permalink to &quot;2. `StorageArea`&quot;">​</a></h3><blockquote><p>存储区域</p></blockquote><h4 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h4><h5 id="_1-onchanged" tabindex="-1">1. <code>onChanged</code> <a class="header-anchor" href="#_1-onchanged" aria-label="Permalink to &quot;1. `onChanged`&quot;">​</a></h5><blockquote><p>在一项或多项更改时触发</p></blockquote><ul><li><code>onChanged</code>: Event&lt;function&gt;</li></ul><p><code>onChanged.addListener</code> 监听 <code>demo</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">onChanged.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>callback</code> 参数如下</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">changes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;void</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="_2-clear" tabindex="-1">2. <code>clear</code> <a class="header-anchor" href="#_2-clear" aria-label="Permalink to &quot;2. `clear`&quot;">​</a></h5><blockquote><p>从存储空间中移除所有内容</p></blockquote><p><code>clear</code> 函数如下所示：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="_3-get" tabindex="-1">3. <code>get</code> <a class="header-anchor" href="#_3-get" aria-label="Permalink to &quot;3. `get`&quot;">​</a></h5><blockquote><p>从存储空间中获取一项或多项内容</p></blockquote><p><code>get</code> 函数如下所示：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">keys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>keys</code>: 要获取的单个键、要获取的键的列表，或指定默认值的字典。空列表或对象将返回空的结果对象。传入 null 以获取存储空间的全部内容。</p><h5 id="_4-getbytesinuse" tabindex="-1">4. <code>getBytesInUse</code> <a class="header-anchor" href="#_4-getbytesinuse" aria-label="Permalink to &quot;4. `getBytesInUse`&quot;">​</a></h5><blockquote><p>获取一项或多项内容占用的空间量（以字节为单位）</p></blockquote><p><code>getBytesInUse</code> 函数如下所示：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">keys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[],</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>keys</code>: 用于获取总用量的单个键或键列表。空列表将返回 0。传入 null 可获取所有存储空间的总用量</p><h5 id="_5-remove" tabindex="-1">5. <code>remove</code> <a class="header-anchor" href="#_5-remove" aria-label="Permalink to &quot;5. `remove`&quot;">​</a></h5><blockquote><p>从存储空间中移除一项或多项内容</p></blockquote><p><code>remove</code> 函数如下所示：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">keys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[],</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>keys</code>: 要移除的项的单个键或键列表</p><h5 id="_6-set" tabindex="-1">6. <code>set</code> <a class="header-anchor" href="#_6-set" aria-label="Permalink to &quot;6. `set`&quot;">​</a></h5><blockquote><p>设置多个项</p></blockquote><p><code>set</code> 函数如下所示</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">items</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>items: 一个对象，提供用于更新存储空间的每个键值对。存储空间中的其他键值对不会受到影响</p><h5 id="_7-setaccesslevel" tabindex="-1">7. <code>setAccessLevel</code> <a class="header-anchor" href="#_7-setaccesslevel" aria-label="Permalink to &quot;7. `setAccessLevel`&quot;">​</a></h5><blockquote><p>为存储区域设置所需的访问权限级别 <code>setAccessLevel</code> 函数如下所示：</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">accessOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>accessOptions</code>: 对象</p><ul><li><code>accessLevel</code>: <code>AccessLevel</code></li></ul><h3 id="_3-storagechange" tabindex="-1">3. <code>StorageChange</code> <a class="header-anchor" href="#_3-storagechange" aria-label="Permalink to &quot;3. `StorageChange`&quot;">​</a></h3><h4 id="属性-1" tabindex="-1">属性 <a class="header-anchor" href="#属性-1" aria-label="Permalink to &quot;属性&quot;">​</a></h4><h5 id="_1-newvalue" tabindex="-1">1. <code>newValue</code> <a class="header-anchor" href="#_1-newvalue" aria-label="Permalink to &quot;1. `newValue`&quot;">​</a></h5><h5 id="_2-oldvalue" tabindex="-1">2. oldValue <a class="header-anchor" href="#_2-oldvalue" aria-label="Permalink to &quot;2. oldValue&quot;">​</a></h5><h2 id="五、chrome-storage-api-属性-properties" tabindex="-1">五、<code>Chrome.storage API</code> 属性（<code>Properties</code>） <a class="header-anchor" href="#五、chrome-storage-api-属性-properties" aria-label="Permalink to &quot;五、`Chrome.storage API` 属性（`Properties`）&quot;">​</a></h2><h3 id="_1-local" tabindex="-1">1. <code>local</code> <a class="header-anchor" href="#_1-local" aria-label="Permalink to &quot;1. `local`&quot;">​</a></h3><blockquote><p>local 存储区域中的内容是每台机器的本地内容</p></blockquote><h4 id="_1-类型" tabindex="-1">1. 类型 <a class="header-anchor" href="#_1-类型" aria-label="Permalink to &quot;1. 类型&quot;">​</a></h4><p><code>StorageArea</code> 对象</p><h4 id="_2-属性" tabindex="-1">2. 属性 <a class="header-anchor" href="#_2-属性" aria-label="Permalink to &quot;2. 属性&quot;">​</a></h4><ul><li><code>QUOTA_BYTES</code>: 10485760 <ul><li>本地存储空间中可存储的数据量上限（以字节为单位），衡量依据是每个值的 <code>JSON</code> 字符串化处理以及每个密钥的长度。如果插件具有 <code>unlimitedStorage</code> 权限，则系统将忽略此值。如果更新会导致超出此限制，则更新会立即失败，并在使用回调时设置 <code>runtime.lastError；如果使用</code> <code>async/await</code>，则设置被拒的 <code>Promise。</code></li></ul></li></ul><h3 id="_2-managed" tabindex="-1">2. <code>managed</code> <a class="header-anchor" href="#_2-managed" aria-label="Permalink to &quot;2.  `managed`&quot;">​</a></h3><blockquote><p><code>managed</code> 存储区域中的内容由域管理员设置，并且对于插件是只读的；尝试修改此命名空间会导致错误。</p></blockquote><h4 id="_1-类型-1" tabindex="-1">1. 类型 <a class="header-anchor" href="#_1-类型-1" aria-label="Permalink to &quot;1. 类型&quot;">​</a></h4><p><code>StorageArea</code></p><h3 id="_3-session" tabindex="-1">3. <code>session</code> <a class="header-anchor" href="#_3-session" aria-label="Permalink to &quot;3. `session`&quot;">​</a></h3><blockquote><p>session 存储区域中的内容存储在内存中，不会持久保留到磁盘中</p></blockquote><h4 id="_1-类型-2" tabindex="-1">1. 类型 <a class="header-anchor" href="#_1-类型-2" aria-label="Permalink to &quot;1. 类型&quot;">​</a></h4><p><code>StorageArea</code> 对象</p><h4 id="属性-2" tabindex="-1">属性 <a class="header-anchor" href="#属性-2" aria-label="Permalink to &quot;属性&quot;">​</a></h4><ul><li><code>QUOTA_BYTES</code>: 10485760 <ul><li>可存储在内存中的数据量上限（以字节为单位），计算方式为：估算每个值和键的动态分配内存用量。会导致超出此限制的更新会立即失败，并且会在使用回调或 Promise 遭拒时设置 runtime.lastError。</li></ul></li></ul><h3 id="_4-sync" tabindex="-1">4. <code>sync</code> <a class="header-anchor" href="#_4-sync" aria-label="Permalink to &quot;4. `sync`&quot;">​</a></h3><blockquote><p>sync 存储区域中的内容会通过 Chrome 同步功能进行同步</p></blockquote><h4 id="_1-类型-3" tabindex="-1">1. 类型 <a class="header-anchor" href="#_1-类型-3" aria-label="Permalink to &quot;1. 类型&quot;">​</a></h4><p><code>StorageArea</code> 对象</p><h4 id="_2-属性-1" tabindex="-1">2. 属性 <a class="header-anchor" href="#_2-属性-1" aria-label="Permalink to &quot;2. 属性&quot;">​</a></h4><ul><li><code>MAX_ITEMS</code>: 512 <ul><li>同步存储空间中可存储的内容数量上限。会导致超出此限制的更新将立即失败，并在使用回调或 Promise 遭拒时设置 runtime.lastError</li></ul></li><li><code>MAX_WRITE_OPERATIONS_PER_HOUR</code>: 1800 <ul><li>每小时可执行的 set、remove 或 clear 操作次数上限。此上限是每 2 秒 1 次，低于短期的更高每分钟写入次数限制</li></ul></li><li><code>MAX_WRITE_OPERATIONS_PER_MINUTE</code>: 120 <ul><li>每分钟可执行的 set、remove 或 clear 操作次数上限。此速率为每秒 2 次，在更短的时间段内，提供的吞吐量比每小时写入次数更高</li></ul></li><li><code>QUOTA_BYTES</code>: 102400 <ul><li>可存储在同步存储空间中的数据总量（以字节为单位），衡量依据是每个值和每个密钥的长度的 JSON 字符串化处理</li></ul></li><li><code>QUOTA_BYTES_PER_ITEM</code>: 8192 <ul><li>同步存储空间中每一项的大小上限（以字节为单位），衡量依据是相应项的值加上密钥长度的 JSON 字符串化处理</li></ul></li></ul><h2 id="六、chrome-storage-api-事件-events" tabindex="-1">六、<code>Chrome.storage API</code> 事件（<code>Events</code>） <a class="header-anchor" href="#六、chrome-storage-api-事件-events" aria-label="Permalink to &quot;六、`Chrome.storage API` 事件（`Events`）&quot;">​</a></h2><h3 id="_1-onchanged-1" tabindex="-1">1. <code>onChanged</code> <a class="header-anchor" href="#_1-onchanged-1" aria-label="Permalink to &quot;1. `onChanged`&quot;">​</a></h3><blockquote><p>在一项或多项更改时触发</p></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chrome.storage.onChanged.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  callback: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>callback</code> 参数如下所示：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">changes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">areaName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;void</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="七、示例" tabindex="-1">七、示例 <a class="header-anchor" href="#七、示例" aria-label="Permalink to &quot;七、示例&quot;">​</a></h2><h3 id="_1-storage-api-用法示例" tabindex="-1">1. <code>Storage API</code> 用法示例 <a class="header-anchor" href="#_1-storage-api-用法示例" aria-label="Permalink to &quot;1. `Storage API` 用法示例&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chrome.storage.local.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ key: value }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Value is set&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chrome.storage.local.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Value is &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result.key);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chrome.storage.sync.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ key: value }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Value is set&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chrome.storage.sync.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Value is &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result.key);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chrome.storage.session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ key: value }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Value was set&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chrome.storage.session.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Value is &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result.key);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_2-同步响应存储空间更新" tabindex="-1">2. 同步响应存储空间更新 <a class="header-anchor" href="#_2-同步响应存储空间更新" aria-label="Permalink to &quot;2. 同步响应存储空间更新&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chrome.storage.onChanged.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">changes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [key, { oldValue, newValue }] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(changes)) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      `Storage key &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot; in namespace &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot; changed.`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      `Old value was &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">oldValue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;, new value is &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">newValue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;.`</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_3-从存储空间异步预加载" tabindex="-1">3. 从存储空间异步预加载 <a class="header-anchor" href="#_3-从存储空间异步预加载" aria-label="Permalink to &quot;3. 从存储空间异步预加载&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> storageCache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> initStorageCache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chrome.storage.sync.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(storageCache, items);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chrome.action.onClicked.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tab</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> initStorageCache;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  storageCache.count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  storageCache.lastTabId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tab.id;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  chrome.storage.sync.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(storageCache);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',111),r=[p];function k(o,d,c,E,g,u){return a(),i("div",null,r)}const m=s(h,[["render",k]]);export{b as __pageData,m as default};
