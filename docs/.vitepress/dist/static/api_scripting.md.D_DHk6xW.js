import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.DUbQYUwk.js";const E=JSON.parse('{"title":"chrome.scripting API","description":"","frontmatter":{},"headers":[],"relativePath":"api/scripting.md","filePath":"api/scripting.md"}'),e={name:"api/scripting.md"},l=n(`<h1 id="chrome-scripting-api" tabindex="-1"><code>chrome.scripting API</code> <a class="header-anchor" href="#chrome-scripting-api" aria-label="Permalink to &quot;\`chrome.scripting API\`&quot;">​</a></h1><blockquote><p>使用 <code>chrome.scripting API</code> 在不同上下文中执行脚本。</p></blockquote><blockquote><p>可以使用 <code>chrome.scripting API</code> 将 <code>JavaScript</code> 和 <code>CSS</code> 注入网站。</p></blockquote><h2 id="一、所需权限" tabindex="-1">一、所需权限 <a class="header-anchor" href="#一、所需权限" aria-label="Permalink to &quot;一、所需权限&quot;">​</a></h2><ul><li><code>scripting</code></li></ul><h2 id="二、manifest-配置" tabindex="-1">二、<code>Manifest</code> 配置 <a class="header-anchor" href="#二、manifest-配置" aria-label="Permalink to &quot;二、\`Manifest\` 配置&quot;">​</a></h2><p>使用 <code>chrome.scripting API</code>，需要在 <code>manifest.json</code> 中声明 <code>scripting</code> 权限，以及要向其注入脚本的网页的主机权限。使用 <code>host_permissions</code> 关键字或 <code>activeTab</code> 权限。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Scripting Extension&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;manifest_version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;permissions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;activeTab&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="三、注入" tabindex="-1">三、注入 <a class="header-anchor" href="#三、注入" aria-label="Permalink to &quot;三、注入&quot;">​</a></h2><ul><li>使用 <code>target</code> 参数指定要向其注入 <code>JavaScript</code> 或 <code>CSS</code> 的目标。</li><li>唯一的必填字段是 <code>tabId</code>。</li></ul><h3 id="_1-注入脚本" tabindex="-1">1. 注入脚本 <a class="header-anchor" href="#_1-注入脚本" aria-label="Permalink to &quot;1. 注入脚本&quot;">​</a></h3><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取 tab ID </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getTabId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注入脚本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chrome.scripting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executeScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  target : {tabId : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTabId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  files : [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script injected&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_2-注入代码" tabindex="-1">2. 注入代码 <a class="header-anchor" href="#_2-注入代码" aria-label="Permalink to &quot;2. 注入代码&quot;">​</a></h3><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getTabId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getUserColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> changeBackgroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.body.style.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getUserColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chrome.scripting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executeScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  target : {tabId : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTabId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  func : changeBackgroundColor,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;injected a function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_3-传递参数" tabindex="-1">3. 传递参数 <a class="header-anchor" href="#_3-传递参数" aria-label="Permalink to &quot;3. 传递参数&quot;">​</a></h3><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getTabId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getUserColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> changeBackgroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">backgroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.body.style.backgroundColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> backgroundColor;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chrome.scripting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executeScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  target : {tabId : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTabId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  func : changeBackgroundColor,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  args : [ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUserColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;injected a function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_4-注入-css" tabindex="-1">4. 注入 <code>CSS</code> <a class="header-anchor" href="#_4-注入-css" aria-label="Permalink to &quot;4. 注入 \`CSS\`&quot;">​</a></h3><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getTabId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;body { background-color: red; }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chrome.scripting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insertCSS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  target : {tabId : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getTabId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  css : css,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CSS injected&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_5-取消所有脚本" tabindex="-1">5. 取消所有脚本 <a class="header-anchor" href="#_5-取消所有脚本" aria-label="Permalink to &quot;5. 取消所有脚本&quot;">​</a></h3><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> unregisterAllDynamicContentScripts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scripts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chrome.scripting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRegisteredContentScripts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scriptIds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scripts.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> script.id);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chrome.scripting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unregisterContentScripts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(scriptIds);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;An unexpected error occurred while&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;unregistering dynamic content scripts.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message, {cause : error});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="四、类型-types" tabindex="-1">四、类型（<code>Types</code>） <a class="header-anchor" href="#四、类型-types" aria-label="Permalink to &quot;四、类型（\`Types\`）&quot;">​</a></h2><h3 id="_1-contentscriptfilter" tabindex="-1">1. <code>ContentScriptFilter</code> <a class="header-anchor" href="#_1-contentscriptfilter" aria-label="Permalink to &quot;1. \`ContentScriptFilter\`&quot;">​</a></h3><h4 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h4><ul><li><code>ids：string[]</code> 可选 <ul><li>如果指定，<code>getRegisteredContentScripts</code> 将仅返回具有此列表中指定的 <code>ID</code> 的脚本</li></ul></li></ul><h3 id="_2-cssinjection" tabindex="-1">2. <code>CSSInjection</code> <a class="header-anchor" href="#_2-cssinjection" aria-label="Permalink to &quot;2. \`CSSInjection\`&quot;">​</a></h3><h4 id="属性-1" tabindex="-1">属性 <a class="header-anchor" href="#属性-1" aria-label="Permalink to &quot;属性&quot;">​</a></h4><ul><li><code>css: string</code>可选 <ul><li>包含要注入的 <code>CSS</code> 的字符串。</li></ul></li><li><code>files: string[]</code> 可选 <ul><li>要注入的 <code>CSS</code> 文件的路径（相对于插件的根目录）。必须指定 <code>files</code> 和 <code>css</code> 中的一个。</li></ul></li><li><code>origin: StyleOrigin</code> 可选 <ul><li>注入的样式来源。默认为 <code>AUTHOR</code>。</li></ul></li><li><code>target: InjectionTarget</code><ul><li>指定要在其中插入 <code>CSS</code> 的目标的详细信息。</li></ul></li></ul><h3 id="_3-executionworld" tabindex="-1">3. <code>ExecutionWorld</code> <a class="header-anchor" href="#_3-executionworld" aria-label="Permalink to &quot;3. \`ExecutionWorld\`&quot;">​</a></h3><blockquote><p>要在其中执行脚本的 <code>JavaScript</code> 环境。</p></blockquote><h4 id="枚举值" tabindex="-1">枚举值 <a class="header-anchor" href="#枚举值" aria-label="Permalink to &quot;枚举值&quot;">​</a></h4><ul><li><code>ISOLATED</code><ul><li>指定独立的环境，是插件独有的执行环境。</li></ul></li><li><code>MAIN</code><ul><li>指定 <code>DOM</code> 的主环境，与托管网页的 <code>JavaScript</code> 共享的执行环境。</li></ul></li></ul><h3 id="_4-injectionresult" tabindex="-1">4. <code>InjectionResult</code> <a class="header-anchor" href="#_4-injectionresult" aria-label="Permalink to &quot;4. \`InjectionResult\`&quot;">​</a></h3><h4 id="属性-2" tabindex="-1">属性 <a class="header-anchor" href="#属性-2" aria-label="Permalink to &quot;属性&quot;">​</a></h4><ul><li><code>documentId: string</code><ul><li>与注入相关的文档。</li></ul></li><li><code>frameId: number</code><ul><li>与注入相关的帧。</li></ul></li><li><code>result: any</code> 可选 <ul><li>脚本执行的结果。</li></ul></li></ul><h3 id="_5-injectiontarget" tabindex="-1">5. <code>InjectionTarget</code> <a class="header-anchor" href="#_5-injectiontarget" aria-label="Permalink to &quot;5. \`InjectionTarget\`&quot;">​</a></h3><h4 id="属性-3" tabindex="-1">属性 <a class="header-anchor" href="#属性-3" aria-label="Permalink to &quot;属性&quot;">​</a></h4><ul><li><code>allFrames: boolean</code> 可选 <ul><li>是否将脚本注入标签页内的所有帧。默认值为 <code>false</code>。如果指定了 <code>frameIds</code>，则此值不能为 <code>true</code>。</li></ul></li><li><code>documentIds: string[]</code> 可选 <ul><li>要注入到的特定 <code>documentId</code> 的 <code>ID</code>。如果已设置 <code>frameIds</code>，则不能设置此字段。</li></ul></li><li><code>frameIds: number[]</code> 可选 <ul><li>要注入到的特定帧的 <code>ID</code>。</li></ul></li><li><code>tabId: number</code><ul><li>要注入的标签页的 <code>ID</code>。</li></ul></li></ul><h3 id="_6-registeredcontentscript" tabindex="-1">6. <code>RegisteredContentScript</code> <a class="header-anchor" href="#_6-registeredcontentscript" aria-label="Permalink to &quot;6. \`RegisteredContentScript\`&quot;">​</a></h3><h4 id="属性-4" tabindex="-1">属性 <a class="header-anchor" href="#属性-4" aria-label="Permalink to &quot;属性&quot;">​</a></h4><ul><li><code>allFrames: boolean</code> 可选 <ul><li>如果指定 <code>true</code>，它将注入所有帧中，即使帧不是标签页中最顶层的帧。系统会单独检查每个框架是否符合网址要求；如果不符合网址要求，该框架将不会注入到子框架中。默认值为 <code>false</code>，表示仅匹配顶部帧。</li></ul></li><li><code>css: string[]</code> 可选 <ul><li>要注入到匹配页面的 <code>CSS</code> 文件列表。在为网页构建或显示任何 <code>DOM</code> 之前，这些对象会按照它们在此数组中显示的顺序进行注入。</li></ul></li><li><code>excludeMatches: string[]</code> 可选 <ul><li>不包括此内容脚本将被注入的网页。</li></ul></li><li><code>id: string</code> <strong>必填项</strong><ul><li><code>API</code> 调用中指定的内容脚本的 <code>ID</code>。不得以“_”开头，因为该字符已预留为生成的脚本 <code>ID</code> 的前缀。</li></ul></li><li><code>js: string[]</code> 可选 <ul><li>要注入到匹配页面的 <code>JavaScript</code> 文件的列表。这些引用会按照它们在此数组中出现的顺序进行注入。</li></ul></li><li><code>matchOriginAsFallback: boolean</code> 可选 <ul><li>指明在网址包含不受支持的架构的帧中，是否可以注入脚本，具体来说就是：<code>about:</code>、<code>data:</code>、<code>blob:</code> 或 <code>filesystem:</code>。在这些情况下，系统会检查网址的来源，以确定是否应注入脚本。如果源是 <code>null</code>（与 <code>data:</code> 网址一样），则所使用的源将是创建当前帧的帧或启动到此帧的导航的帧。请注意，该框架可能不是父框架。</li></ul></li><li><code>matches: string[]</code> 可询啊 <ul><li>指定将此内容脚本注入到哪些网页。必须为 <code>registerContentScripts</code> 指定。</li></ul></li><li><code>persistAcrossSessions: boolean</code> 可选 <ul><li>指定此内容脚本是否将在以后的会话中持续存在。默认值为 <code>true</code>。</li></ul></li><li><code>runAt: RunAt</code> 可选 <ul><li>指定何时将 <code>JavaScript</code> 文件注入网页。默认值为 <code>document_idle</code>。</li></ul></li><li><code>world: ExecutionWorld</code>: 可选 <ul><li>要在其中运行脚本的 <code>JavaScript world</code> 。默认为 <code>ISOLATED</code>。</li></ul></li></ul><h3 id="_7-scriptinjection" tabindex="-1">7. <code>ScriptInjection</code> <a class="header-anchor" href="#_7-scriptinjection" aria-label="Permalink to &quot;7. \`ScriptInjection\`&quot;">​</a></h3><h4 id="属性-5" tabindex="-1">属性 <a class="header-anchor" href="#属性-5" aria-label="Permalink to &quot;属性&quot;">​</a></h4><ul><li><code>args: any[]</code> 可选 <ul><li>提供给提供的函数中的 <code>curry</code> 参数。仅当指定了 <code>func</code> 参数时，此属性才有效。这些参数必须可进行 JSON 序列化。</li></ul></li><li><code>files: string[]</code> 可选 <ul><li>要注入的 <code>JS</code> 或 <code>CSS</code> 文件的路径（相对于插件的根目录）。必须且只能指定 <code>files</code> 和 <code>func</code> 中的一个。</li></ul></li><li><code>injectImmediately: boolean</code> 可选 <ul><li>是否应尽快在目标中触发注入。并不保证注入一定会在网页加载之前发生，因为在脚本到达目标时，网页可能已经加载完毕。</li></ul></li><li><code>target: InjectionTarget</code> <strong>必填项</strong><ul><li>详细说明将脚本注入到的目标。</li></ul></li><li><code>world: ExecutionWorld</code> 可选 <ul><li>要在其中运行脚本的 <code>JavaScript world</code>。默认为 <code>ISOLATED</code>。</li></ul></li><li><code>func</code> 可选 <ul><li>要注入的 <code>JavaScript</code> 函数。系统将对此函数进行序列化，然后进行反序列化以供注入。这意味着所有绑定的参数和执行上下文都将丢失。必须且只能指定 <code>files</code> 和 <code>func</code> 中的一个。</li></ul></li></ul><p><code>func</code> 函数如下所示：</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_8-styleorigin" tabindex="-1">8. <code>StyleOrigin</code> <a class="header-anchor" href="#_8-styleorigin" aria-label="Permalink to &quot;8. \`StyleOrigin\`&quot;">​</a></h3><blockquote><p>样式更改的来源。</p></blockquote><p>在 <code>CSS</code> 中，样式更改的来源分为三类。这些类别称为 <strong><code>style origins</code></strong>。它们是 <strong><code>user agent origin</code></strong>, <strong><code>user origin</code></strong> 和 <strong><code>author origin</code></strong>。</p><h4 id="枚举值-1" tabindex="-1">枚举值 <a class="header-anchor" href="#枚举值-1" aria-label="Permalink to &quot;枚举值&quot;">​</a></h4><ul><li><code>User-agent</code></li><li><code>User</code></li><li><code>Author</code></li></ul><h2 id="五、方法-methods" tabindex="-1">五、方法（<code>Methods</code>） <a class="header-anchor" href="#五、方法-methods" aria-label="Permalink to &quot;五、方法（\`Methods\`）&quot;">​</a></h2><h3 id="_1-executescript" tabindex="-1">1. <code>executeScript()</code> <a class="header-anchor" href="#_1-executescript" aria-label="Permalink to &quot;1. \`executeScript()\`&quot;">​</a></h3><blockquote><p>将脚本注入目标上下文。该脚本将在 <code>document_idle</code> 运行。如果脚本的计算结果是一个 <code>promise</code>，则浏览器将等待该 <code>promise</code> 得到解决并返回结果值。</p></blockquote><h4 id="_1-示例" tabindex="-1">1. 示例 <a class="header-anchor" href="#_1-示例" aria-label="Permalink to &quot;1. 示例&quot;">​</a></h4><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chrome.scripting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executeScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  injection:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ScriptInjection,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_2-参数" tabindex="-1">2. 参数 <a class="header-anchor" href="#_2-参数" aria-label="Permalink to &quot;2. 参数&quot;">​</a></h4><ul><li><code>injection: ScriptInjection</code><ul><li>脚本的详细信息</li></ul></li><li><code>callback: function</code> 可选 <ul><li><code>(results: InjectionResult[])=&gt;void</code></li></ul></li></ul><h4 id="_3-返回" tabindex="-1">3. 返回 <a class="header-anchor" href="#_3-返回" aria-label="Permalink to &quot;3. 返回&quot;">​</a></h4><ul><li><code>Promise&lt;InjectionResult[]&gt;</code></li></ul><h3 id="_2-getregisteredcontentscripts" tabindex="-1">2. <code>getRegisteredContentScripts()</code> <a class="header-anchor" href="#_2-getregisteredcontentscripts" aria-label="Permalink to &quot;2. \`getRegisteredContentScripts()\`&quot;">​</a></h3><blockquote><p>返回此插件中与指定过滤器匹配的所有动态注册的内容脚本。</p></blockquote><h4 id="_1-示例-1" tabindex="-1">1. 示例 <a class="header-anchor" href="#_1-示例-1" aria-label="Permalink to &quot;1. 示例&quot;">​</a></h4><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chrome.scripting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRegisteredContentScripts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  filter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ContentScriptFilter,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_2-参数-1" tabindex="-1">2. 参数 <a class="header-anchor" href="#_2-参数-1" aria-label="Permalink to &quot;2. 参数&quot;">​</a></h4><ul><li><code>filter: ContentScriptFilter</code> 可选 <ul><li>用于过滤插件动态注册的脚本的对象。</li></ul></li><li><code>callback: function</code> 可选 <ul><li><code>(scripts: RegisteredContentScript[])=&gt;void</code></li></ul></li></ul><h4 id="_3-返回-1" tabindex="-1">3. 返回 <a class="header-anchor" href="#_3-返回-1" aria-label="Permalink to &quot;3. 返回&quot;">​</a></h4><ul><li><code>Promise&lt;RegisteredContentScript[]&gt;</code></li></ul><h3 id="_3-insertcss" tabindex="-1">3. <code>insertCSS()</code> <a class="header-anchor" href="#_3-insertcss" aria-label="Permalink to &quot;3. \`insertCSS()\`&quot;">​</a></h3><blockquote><p>将 <code>CSS</code> 样式表插入目标上下文。如果指定了多个帧，系统会忽略不成功的注入。</p></blockquote><h4 id="_1-示例-2" tabindex="-1">1. 示例 <a class="header-anchor" href="#_1-示例-2" aria-label="Permalink to &quot;1. 示例&quot;">​</a></h4><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chrome.scripting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insertCSS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  injection:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  CSSInjection,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_2-参数-2" tabindex="-1">2. 参数 <a class="header-anchor" href="#_2-参数-2" aria-label="Permalink to &quot;2. 参数&quot;">​</a></h4><ul><li><code>injection: CSSInjection</code><ul><li>要插入的样式的详细信息。</li></ul></li><li><code>callback: function</code> 可选 <ul><li><code>()=&gt;void</code></li></ul></li></ul><h4 id="_3-返回-2" tabindex="-1">3. 返回 <a class="header-anchor" href="#_3-返回-2" aria-label="Permalink to &quot;3. 返回&quot;">​</a></h4><ul><li><code>Promise&lt;void&gt;</code></li></ul><h3 id="_4-registercontentscripts" tabindex="-1">4. <code>registerContentScripts()</code> <a class="header-anchor" href="#_4-registercontentscripts" aria-label="Permalink to &quot;4. \`registerContentScripts()\`&quot;">​</a></h3><blockquote><p>为此插件注册一个或多个内容脚本。</p></blockquote><h4 id="_1-示例-3" tabindex="-1">1. 示例 <a class="header-anchor" href="#_1-示例-3" aria-label="Permalink to &quot;1. 示例&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>chrome.scripting.registerContentScripts(</span></span>
<span class="line"><span>  scripts:</span></span>
<span class="line"><span>  RegisteredContentScript[],</span></span>
<span class="line"><span>  callback?:</span></span>
<span class="line"><span>  function,</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_2-参数-3" tabindex="-1">2. 参数 <a class="header-anchor" href="#_2-参数-3" aria-label="Permalink to &quot;2. 参数&quot;">​</a></h4><ul><li><code>scripts: RegisteredContentScript[]</code><ul><li>包含要注册的脚本的列表。</li></ul></li><li><code>callback: function</code> 可选 <ul><li><code>()=&gt;void</code></li></ul></li></ul><h4 id="_3-返回-3" tabindex="-1">3. 返回 <a class="header-anchor" href="#_3-返回-3" aria-label="Permalink to &quot;3. 返回&quot;">​</a></h4><ul><li><code>Promise&lt;void&gt;</code></li></ul><h3 id="_5-removecss" tabindex="-1">5. <code>removeCSS()</code> <a class="header-anchor" href="#_5-removecss" aria-label="Permalink to &quot;5. \`removeCSS()\`&quot;">​</a></h3><blockquote><p>从目标上下文中移除此插件之前插入的 <code>CSS</code> 样式表。</p></blockquote><h4 id="_1-示例-4" tabindex="-1">1. 示例 <a class="header-anchor" href="#_1-示例-4" aria-label="Permalink to &quot;1. 示例&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>chrome.scripting.removeCSS(</span></span>
<span class="line"><span>  injection:</span></span>
<span class="line"><span>  CSSInjection,</span></span>
<span class="line"><span>  callback?:</span></span>
<span class="line"><span>  function,</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_2-参数-4" tabindex="-1">2. 参数 <a class="header-anchor" href="#_2-参数-4" aria-label="Permalink to &quot;2. 参数&quot;">​</a></h4><ul><li><code>injection: CSSInjection</code><ul><li>要移除的样式的详细信息。</li></ul></li><li><code>callback: function</code> 可选 <ul><li><code>()=&gt;void</code></li></ul></li></ul><h4 id="_3-返回-4" tabindex="-1">3. 返回 <a class="header-anchor" href="#_3-返回-4" aria-label="Permalink to &quot;3. 返回&quot;">​</a></h4><ul><li><code>Promise&lt;void&gt;</code></li></ul><h3 id="_6-unregistercontentscripts" tabindex="-1">6. <code>unregisterContentScripts()</code> <a class="header-anchor" href="#_6-unregistercontentscripts" aria-label="Permalink to &quot;6. \`unregisterContentScripts()\`&quot;">​</a></h3><p>Promise Chrome 96 及更高版本</p><blockquote><p>为此插件取消注册内容脚本。</p></blockquote><h4 id="_1-示例-5" tabindex="-1">1. 示例 <a class="header-anchor" href="#_1-示例-5" aria-label="Permalink to &quot;1. 示例&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>chrome.scripting.unregisterContentScripts(</span></span>
<span class="line"><span>  filter?:</span></span>
<span class="line"><span>  ContentScriptFilter,</span></span>
<span class="line"><span>  callback?:</span></span>
<span class="line"><span>  function,</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_2-参数-5" tabindex="-1">2. 参数 <a class="header-anchor" href="#_2-参数-5" aria-label="Permalink to &quot;2. 参数&quot;">​</a></h4><ul><li><code>filter: ContentScriptFilter</code> 可选 <ul><li>如果指定，则仅取消注册与过滤条件匹配的动态内容脚本。否则，该插件的所有动态内容脚本都会被取消注册。</li></ul></li><li><code>callback: function</code> 可选 <ul><li><code>()=&gt;void</code></li></ul></li></ul><h4 id="_3-返回-5" tabindex="-1">3. 返回 <a class="header-anchor" href="#_3-返回-5" aria-label="Permalink to &quot;3. 返回&quot;">​</a></h4><ul><li><code>Promise&lt;void&gt;</code></li></ul><h3 id="_7-updatecontentscripts" tabindex="-1">7. <code>updateContentScripts()</code> <a class="header-anchor" href="#_7-updatecontentscripts" aria-label="Permalink to &quot;7. \`updateContentScripts()\`&quot;">​</a></h3><blockquote><p>更新此插件的一个或多个内容脚本。</p></blockquote><h4 id="_1-示例-6" tabindex="-1">1. 示例 <a class="header-anchor" href="#_1-示例-6" aria-label="Permalink to &quot;1. 示例&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>chrome.scripting.updateContentScripts(</span></span>
<span class="line"><span>  scripts:</span></span>
<span class="line"><span>  RegisteredContentScript[],</span></span>
<span class="line"><span>  callback?:</span></span>
<span class="line"><span>  function,</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_2-参数-6" tabindex="-1">2. 参数 <a class="header-anchor" href="#_2-参数-6" aria-label="Permalink to &quot;2. 参数&quot;">​</a></h4><ul><li><code>scripts: RegisteredContentScript</code><ul><li>包含要更新的脚本列表。</li></ul></li><li><code>callback: function</code> 可选 <ul><li><code>()=&gt;void</code></li></ul></li></ul><h4 id="_3-返回-6" tabindex="-1">3. 返回 <a class="header-anchor" href="#_3-返回-6" aria-label="Permalink to &quot;3. 返回&quot;">​</a></h4><ul><li><code>Promise&lt;void&gt;</code></li></ul>`,108),t=[l];function p(r,c,h,o,d,k){return a(),i("div",null,t)}const g=s(e,[["render",p]]);export{E as __pageData,g as default};
